# services:
#   app:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: profnastil
#     restart: unless-stopped
#     labels:
#     - "traefik.enable=true"
#     - "traefik.http.routers.profnastil-secure.rule=Host(`profnastil-metal.ru`)"
#     - "traefik.http.routers.profnastil-secure.entrypoints=websecure"
#     - "traefik.http.routers.profnastil-secure.tls.certresolver=letsencrypt"
#     - "traefik.http.services.profnastil.loadbalancer.server.port=3000"
#     networks:
#       - traefik-network

# networks:
#   traefik-network:
#     external: true
#     name: traefik-network

version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: profnastil_db
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - traefik-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: profnastil
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.profnastil-secure.rule=Host(`profnastil-metal.ru`)"
      - "traefik.http.routers.profnastil-secure.entrypoints=websecure"
      - "traefik.http.routers.profnastil-secure.tls.certresolver=letsencrypt"
      - "traefik.http.services.profnastil.loadbalancer.server.port=3000"
    networks:
      - traefik-network

volumes:
  postgres_data:

networks:
  traefik-network:
    external: true
    name: traefik-network